import org.jetbrains.kotlin.gradle.tasks.KotlinJvmCompile
import org.jetbrains.kotlin.gradle.dsl.JvmTarget

buildscript {
	dependencies {
		classpath libs.kotlin.gradle.plugin
	}
}

apply plugin: 'org.jetbrains.kotlin.jvm'

configurations {
	r8
}

dependencies {
	testImplementation libs.junit
	testImplementation libs.truth

	r8 libs.r8
}

tasks.withType(JavaCompile).configureEach {
	sourceCompatibility = JavaVersion.VERSION_11
	targetCompatibility = JavaVersion.VERSION_11
}

tasks.withType(KotlinJvmCompile).configureEach {
	compilerOptions.jvmTarget = JvmTarget.JVM_11
}

def fatJarProvider = tasks.register('fatJar', Jar) { task ->
	task.dependsOn(configurations.named('runtimeClasspath'))
	task.dependsOn(tasks.named('jar'))

	task.archiveClassifier = 'fat'

	task.manifest {
		attributes 'Main-Class': 'com.jakewharton.gradle.dependencies.DependencyTreeDiff'
	}

	def sourceClasses = sourceSets.main.output.classesDirs
	task.inputs.files(sourceClasses)
	task.from files(sourceClasses)
	task.from configurations.named('runtimeClasspath').map {
		it.asFileTree.files.collect { it.isDirectory() ? it : zipTree(it) }
	}

	task.exclude '**/*.kotlin_metadata'
	task.exclude '**/*.kotlin_module'
	task.exclude '**/*.kotlin_builtins'
	task.exclude '**/module-info.class'
	task.exclude 'META-INF/maven/**'
}

def r8File = layout.buildDirectory.file("libs/${base.archivesName.get()}-r8.jar").get().asFile
def rulesFile = project.file("src/main/rules.txt")

def r8Jar = tasks.register('r8Jar', JavaExec) { task ->
	def fatJarFile = fatJarProvider.get().archiveFile
	task.inputs.file(fatJarFile)
	task.inputs.file(rulesFile)
	task.outputs.file(r8File)

	// R8 uses the executing JDK to determine the classfile target.
	javaLauncher = javaToolchains.launcherFor {
		languageVersion = JavaLanguageVersion.of(11)
		vendor = JvmVendorSpec.AZUL
	}

	task.classpath(configurations.r8)
	task.mainClass = 'com.android.tools.r8.R8'
	task.args = [
		'--release',
		'--classfile',
		'--output', r8File.path,
		'--pg-conf', rulesFile.path,
		'--lib', System.properties['java.home'].toString(),
		fatJarFile.get().asFile.path
	]
}

def binaryFile = layout.buildDirectory.file("${base.archivesName.get()}.jar").get().asFile
def binaryJar = tasks.register('binaryJar') { task ->
	task.dependsOn(r8Jar)

	task.inputs.file(r8File)
	task.outputs.file(binaryFile)

	task.doLast {
		binaryFile.getParentFile().mkdirs()
		binaryFile.delete()
		binaryFile << "#!/bin/sh\n\nexec java \$JAVA_OPTS -jar \$0 \"\$@\"\n\n"
		r8File.withInputStream { binaryFile.append it }

		binaryFile.setExecutable true, false
	}
}

tasks.named('assemble').configure { task ->
	task.dependsOn(binaryJar)
}

artifacts {
	archives file: binaryFile, name: 'binary', type: 'jar', builtBy: binaryJar, classifier: 'binary'
}

buildscript {
	repositories {
		mavenCentral()
	}
}
repositories {
	mavenCentral()
	google()
}
