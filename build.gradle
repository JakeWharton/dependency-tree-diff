import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
import org.jetbrains.kotlin.gradle.dsl.JvmTarget

plugins {
	id("org.jetbrains.kotlin.jvm") version("1.9.20")
}

kotlin {
	jvmToolchain(21)
}

tasks.withType(KotlinCompile).configureEach {
	compilerOptions {
		jvmTarget = JvmTarget.JVM_11
	}
}

tasks.withType(JavaCompile).configureEach {
	options.release.set(11)
}

configurations {
	r8
}

dependencies {
	testImplementation 'junit:junit:4.13.2'
	testImplementation 'com.google.truth:truth:1.1.3'

	r8 'com.android.tools:r8:8.1.56'
}

def fatJarProvider = tasks.register('fatJar', Jar) { task ->
	task.dependsOn(configurations.named('runtimeClasspath'))
	task.dependsOn(tasks.named('jar'))

	task.archiveClassifier.set('fat')

	task.manifest {
		attributes 'Main-Class': 'com.jakewharton.gradle.dependencies.DependencyTreeDiff'
	}

	def sourceClasses = sourceSets.main.output.classesDirs
	task.inputs.files(sourceClasses)
	task.from files(sourceClasses)
	task.from configurations.named('runtimeClasspath').map {
		it.asFileTree.files.collect { it.isDirectory() ? it : zipTree(it) }
	}

	task.exclude '**/*.kotlin_metadata'
	task.exclude '**/*.kotlin_module'
	task.exclude '**/*.kotlin_builtins'
	task.exclude '**/module-info.class'
	task.exclude 'META-INF/maven/**'
}

def r8File = layout.buildDirectory.file("libs/$archivesBaseName-r8.jar").get().asFile
def rulesFile = project.file("src/main/rules.txt")

def r8Jar = tasks.register('r8Jar', JavaExec) { task ->
	task.javaLauncher.set(javaToolchains.launcherFor { spec ->
		spec.languageVersion.set(JavaLanguageVersion.of(17))
	})
	def fatJarFile = fatJarProvider.get().archiveFile
	task.inputs.file(fatJarFile)
	task.inputs.file(rulesFile)
	task.outputs.file(r8File)

	task.classpath(configurations.r8)
	task.mainClass.set('com.android.tools.r8.R8')
	task.args = [
		'--release',
		'--classfile',
		'--output', r8File.path,
		'--pg-conf', rulesFile.path,
		'--lib', System.properties['java.home'].toString(),
		fatJarFile.get().asFile.path
	]
}

def binaryFile = layout.buildDirectory.file("libs/${archivesBaseName}.jar").get().asFile
def binaryJar = tasks.register('binaryJar') { task ->
	task.dependsOn(r8Jar)

	task.inputs.file(r8File)
	task.outputs.file(binaryFile)

	task.doLast {
		binaryFile.getParentFile().mkdirs()
		binaryFile.delete()
		binaryFile << "#!/bin/sh\n\nexec java \$JAVA_OPTS -jar \$0 \"\$@\"\n\n"
		r8File.withInputStream { binaryFile.append it }

		binaryFile.setExecutable true, false
	}
}

tasks.named('assemble').configure { task ->
	task.dependsOn(binaryJar)
}

artifacts {
	archives file: binaryFile, name: 'binary', type: 'jar', builtBy: binaryJar, classifier: 'binary'
}
